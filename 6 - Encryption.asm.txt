COMMENT @
Assignment 6, by Leonardo Blas.
In this assignment we prompt the user for a string, which we then encrypt and
decrypt, using a XOR encryption. We display the inut, the cipher text, and
the decrypted string. The key, called encKey, is set to "ABXmv#7".
@

INCLUDE Irvine32.inc
KEY = 239 ; any value between 1-255
BUFMAX = 128 ; maximum buffer size

.data
sPrompt	BYTE		"Enter the plain text:",0
sEncrypt	BYTE		"Cipher text: ",0
sDecrypt	BYTE		"Decrypted: ",0
buffer	BYTE		BUFMAX+1 DUP(0)
bufSize	DWORD	?
encKey	BYTE		"ABXmv#7"

.code
main PROC
	call InputTheString ; input the plain text
	call TranslateBuffer ; encrypt the buffer
	mov	edx,OFFSET sEncrypt ; display encrypted message
	call DisplayMessage
	call TranslateBuffer ; decrypt the buffer
	mov	edx,OFFSET sDecrypt ; display decrypted message
	call	DisplayMessage
	exit
main ENDP
;-----------------------------------------------------
InputTheString PROC
;
; Prompts user for a plaintext string. Saves the string
; and its length.
; Receives: nothing
; Returns: nothing
;-----------------------------------------------------
	pushad ; save 32-bit registers
	mov	edx,OFFSET sPrompt ; display a prompt
	call WriteString
	mov	ecx,BUFMAX ; maximum character count
	mov	edx,OFFSET buffer ; point to the buffer
	call	ReadString ; input the string
	mov	bufSize,eax ; save the length
	call	Crlf
	popad
	ret
InputTheString ENDP
;-----------------------------------------------------
DisplayMessage PROC
;
; Displays the encrypted or decrypted message.
; Receives: EDX points to the message
; Returns: nothing
;-----------------------------------------------------
	pushad
	call	WriteString
	mov	edx,OFFSET buffer ; display the buffer
	call	WriteString
	call	Crlf
	call	Crlf
	popad
	ret
DisplayMessage ENDP
;-----------------------------------------------------
TranslateBuffer PROC
;
; Translates the string by exclusive-ORing each
; byte with the encryption key byte.
; Receives: nothing
; Returns: nothing
;-----------------------------------------------------
	mov	ebx, SIZEOF encKey
	pushad
	mov	ecx, bufSize ; loop counter
	mov	esi, 0 ; index 0 in buffer
L1:
	mov	edx,	0
	mov	eax,	esi
	div	ebx				; division, remainder will go to edx
	mov	al, encKey[edx]
	xor	buffer[esi], al		; translate a byte
	inc	esi ; point to next byte
	loop	L1
	popad
	ret
TranslateBuffer ENDP
END main

COMMENT @
SAMPLE RUN:

Enter the plain text:This is a Plaintext message

Cipher text: *1VJDa#x=B^/6=Z$1+F

Decrypted: This is a Plaintext message
@